{"ast":null,"code":"var _jsxFileName = \"/Users/akr4m/Desktop/Food_OrderingApp/frontend/src/context/CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create the Cart Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the Cart Context\nexport function useCart() {\n  _s();\n  return useContext(CartContext);\n}\n\n// Cart Provider Component\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function CartProvider({\n  children\n}) {\n  _s2();\n  const [cart, setCart] = useState([]);\n  const [totalItems, setTotalItems] = useState(0);\n  const [totalPrice, setTotalPrice] = useState(0);\n\n  // Load cart from localStorage on component mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      const parsedCart = JSON.parse(savedCart);\n      setCart(parsedCart);\n    }\n  }, []);\n\n  // Update localStorage and calculate totals whenever cart changes\n  useEffect(() => {\n    // Update localStorage\n    localStorage.setItem('cart', JSON.stringify(cart));\n\n    // Calculate total items and price\n    let items = 0;\n    let price = 0;\n    cart.forEach(item => {\n      items += item.quantity;\n      price += item.price * item.quantity;\n    });\n    setTotalItems(items);\n    setTotalPrice(price);\n  }, [cart]);\n\n  // Add item to cart\n  const addToCart = item => {\n    setCart(prevCart => {\n      // Check if item already exists in cart\n      const existingItemIndex = prevCart.findIndex(cartItem => cartItem.id === item.id);\n      if (existingItemIndex >= 0) {\n        // Item exists, update quantity\n        const updatedCart = [...prevCart];\n        updatedCart[existingItemIndex] = {\n          ...updatedCart[existingItemIndex],\n          quantity: updatedCart[existingItemIndex].quantity + 1\n        };\n        return updatedCart;\n      } else {\n        // Item doesn't exist, add new item\n        return [...prevCart, {\n          ...item,\n          quantity: 1\n        }];\n      }\n    });\n  };\n\n  // Remove item from cart\n  const removeFromCart = itemId => {\n    setCart(prevCart => {\n      return prevCart.filter(item => item.id !== itemId);\n    });\n  };\n\n  // Update item quantity\n  const updateQuantity = (itemId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(itemId);\n      return;\n    }\n    setCart(prevCart => {\n      return prevCart.map(item => item.id === itemId ? {\n        ...item,\n        quantity\n      } : item);\n    });\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  // Create the context value\n  const value = {\n    cart,\n    totalItems,\n    totalPrice,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s2(CartProvider, \"vMhps8zLyHx2XcAV4GQoxGkl9oc=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","CartContext","useCart","_s","CartProvider","children","_s2","cart","setCart","totalItems","setTotalItems","totalPrice","setTotalPrice","savedCart","localStorage","getItem","parsedCart","JSON","parse","setItem","stringify","items","price","forEach","item","quantity","addToCart","prevCart","existingItemIndex","findIndex","cartItem","id","updatedCart","removeFromCart","itemId","filter","updateQuantity","map","clearCart","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/akr4m/Desktop/Food_OrderingApp/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create the Cart Context\nconst CartContext = createContext();\n\n// Custom hook to use the Cart Context\nexport function useCart() {\n  return useContext(CartContext);\n}\n\n// Cart Provider Component\nexport function CartProvider({ children }) {\n  const [cart, setCart] = useState([]);\n  const [totalItems, setTotalItems] = useState(0);\n  const [totalPrice, setTotalPrice] = useState(0);\n  \n  // Load cart from localStorage on component mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      const parsedCart = JSON.parse(savedCart);\n      setCart(parsedCart);\n    }\n  }, []);\n  \n  // Update localStorage and calculate totals whenever cart changes\n  useEffect(() => {\n    // Update localStorage\n    localStorage.setItem('cart', JSON.stringify(cart));\n    \n    // Calculate total items and price\n    let items = 0;\n    let price = 0;\n    \n    cart.forEach(item => {\n      items += item.quantity;\n      price += item.price * item.quantity;\n    });\n    \n    setTotalItems(items);\n    setTotalPrice(price);\n  }, [cart]);\n  \n  // Add item to cart\n  const addToCart = (item) => {\n    setCart(prevCart => {\n      // Check if item already exists in cart\n      const existingItemIndex = prevCart.findIndex(cartItem => cartItem.id === item.id);\n      \n      if (existingItemIndex >= 0) {\n        // Item exists, update quantity\n        const updatedCart = [...prevCart];\n        updatedCart[existingItemIndex] = {\n          ...updatedCart[existingItemIndex],\n          quantity: updatedCart[existingItemIndex].quantity + 1\n        };\n        return updatedCart;\n      } else {\n        // Item doesn't exist, add new item\n        return [...prevCart, { ...item, quantity: 1 }];\n      }\n    });\n  };\n  \n  // Remove item from cart\n  const removeFromCart = (itemId) => {\n    setCart(prevCart => {\n      return prevCart.filter(item => item.id !== itemId);\n    });\n  };\n  \n  // Update item quantity\n  const updateQuantity = (itemId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(itemId);\n      return;\n    }\n    \n    setCart(prevCart => {\n      return prevCart.map(item => \n        item.id === itemId ? { ...item, quantity } : item\n      );\n    });\n  };\n  \n  // Clear cart\n  const clearCart = () => {\n    setCart([]);\n  };\n  \n  // Create the context value\n  const value = {\n    cart,\n    totalItems,\n    totalPrice,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart\n  };\n  \n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}