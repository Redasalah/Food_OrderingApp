{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api/public/restaurants';\n\n// Helper function to log errors\nconst logError = (error, context) => {\n  var _error$response, _error$response2;\n  console.error(`RestaurantAPI Error (${context}):`, {\n    message: error.message,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n  });\n};\nconst restaurantApi = {\n  // Get all restaurants with optional filters\n  getAllRestaurants: async (filters = {}) => {\n    try {\n      const response = await axios.get(API_URL, {\n        params: filters\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      logError(error, 'getAllRestaurants');\n\n      // Mock data for development (remove in production)\n      const mockData = [{\n        id: '1',\n        name: 'Pizza Paradise',\n        cuisine: 'Italian',\n        rating: 4.8,\n        deliveryTime: '25-35 min',\n        deliveryFee: 2.99,\n        imageUrl: 'https://images.unsplash.com/photo-1513104890138-7c749659a591?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n        priceRange: '$$'\n      }, {\n        id: '2',\n        name: 'Burger Bliss',\n        cuisine: 'American',\n        rating: 4.5,\n        deliveryTime: '15-25 min',\n        deliveryFee: 1.99,\n        imageUrl: 'https://images.unsplash.com/photo-1568901346375-23c9450c58cd?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n        priceRange: '$$'\n      }, {\n        id: '3',\n        name: 'Sushi Sensation',\n        cuisine: 'Japanese',\n        rating: 4.9,\n        deliveryTime: '35-45 min',\n        deliveryFee: 3.99,\n        imageUrl: 'https://images.unsplash.com/photo-1579871494447-9811cf80d66c?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n        priceRange: '$$$'\n      }, {\n        id: '4',\n        name: 'Taco Time',\n        cuisine: 'Mexican',\n        rating: 4.6,\n        deliveryTime: '20-30 min',\n        deliveryFee: 2.49,\n        imageUrl: 'https://images.unsplash.com/photo-1565299585323-38d6b0865b47?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n        priceRange: '$'\n      }, {\n        id: '5',\n        name: 'Pho Delight',\n        cuisine: 'Vietnamese',\n        rating: 4.7,\n        deliveryTime: '25-40 min',\n        deliveryFee: 2.99,\n        imageUrl: 'https://images.unsplash.com/photo-1582878826629-29b7ad1cdc43?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n        priceRange: '$$'\n      }, {\n        id: '6',\n        name: 'Curry House',\n        cuisine: 'Indian',\n        rating: 4.8,\n        deliveryTime: '30-45 min',\n        deliveryFee: 3.49,\n        imageUrl: 'https://images.unsplash.com/photo-1505253758473-96b7015fcd40?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n        priceRange: '$$'\n      }];\n      console.log('Using mock data for restaurants');\n      return {\n        success: true,\n        data: mockData\n      };\n    }\n  },\n  // Get a specific restaurant by ID\n  getRestaurantById: async id => {\n    try {\n      const response = await axios.get(`${API_URL}/${id}`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      logError(error, 'getRestaurantById');\n\n      // Mock data for development (remove in production)\n      const mockRestaurant = {\n        id: id,\n        name: 'Pizza Paradise',\n        cuisine: 'Italian',\n        rating: 4.8,\n        deliveryTime: '25-35 min',\n        deliveryFee: 2.99,\n        imageUrl: 'https://images.unsplash.com/photo-1513104890138-7c749659a591?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n        priceRange: '$$',\n        address: '123 Main St, Anytown, USA',\n        hours: '10:00 AM - 10:00 PM',\n        description: 'Pizza Paradise offers authentic Italian pizzas made with the freshest ingredients. Our dough is made fresh daily and we use only the finest cheeses and toppings.',\n        menu: [{\n          id: 'm1',\n          category: 'Pizzas',\n          items: [{\n            id: 'p1',\n            name: 'Margherita',\n            description: 'Classic pizza with tomato sauce, mozzarella, fresh basil, salt, and olive oil',\n            price: 12.99,\n            imageUrl: 'https://images.unsplash.com/photo-1574071318508-1cdbab80d002?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80',\n            popular: true\n          }, {\n            id: 'p2',\n            name: 'Pepperoni',\n            description: 'Classic pizza topped with tomato sauce, mozzarella, and pepperoni slices',\n            price: 14.99,\n            imageUrl: 'https://images.unsplash.com/photo-1628840042765-356cda07504e?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80',\n            popular: true\n          }]\n        }, {\n          id: 'm2',\n          category: 'Sides',\n          items: [{\n            id: 's1',\n            name: 'Garlic Bread',\n            description: 'Crispy bread with garlic butter and herbs',\n            price: 4.99,\n            imageUrl: '',\n            popular: true\n          }]\n        }]\n      };\n      console.log('Using mock data for restaurant detail');\n      return {\n        success: true,\n        data: mockRestaurant\n      };\n    }\n  },\n  // Get restaurant menu\n  getRestaurantMenu: async restaurantId => {\n    try {\n      const response = await axios.get(`${API_URL}/${restaurantId}/menu`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      logError(error, 'getRestaurantMenu');\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to load restaurant menu.'\n      };\n    }\n  }\n};\nexport default restaurantApi;","map":{"version":3,"names":["axios","API_URL","logError","error","context","_error$response","_error$response2","console","message","status","response","data","restaurantApi","getAllRestaurants","filters","get","params","success","mockData","id","name","cuisine","rating","deliveryTime","deliveryFee","imageUrl","priceRange","log","getRestaurantById","mockRestaurant","address","hours","description","menu","category","items","price","popular","getRestaurantMenu","restaurantId","_error$response3","_error$response3$data"],"sources":["/Users/akr4m/Desktop/Food_OrderingApp/frontend/src/api/restaurantApi.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8080/api/public/restaurants';\n\n// Helper function to log errors\nconst logError = (error, context) => {\n  console.error(`RestaurantAPI Error (${context}):`, {\n    message: error.message,\n    status: error.response?.status,\n    data: error.response?.data,\n  });\n};\n\nconst restaurantApi = {\n  // Get all restaurants with optional filters\n  getAllRestaurants: async (filters = {}) => {\n    try {\n      const response = await axios.get(API_URL, { params: filters });\n      return { success: true, data: response.data };\n    } catch (error) {\n      logError(error, 'getAllRestaurants');\n      \n      // Mock data for development (remove in production)\n      const mockData = [\n        {\n          id: '1',\n          name: 'Pizza Paradise',\n          cuisine: 'Italian',\n          rating: 4.8,\n          deliveryTime: '25-35 min',\n          deliveryFee: 2.99,\n          imageUrl: 'https://images.unsplash.com/photo-1513104890138-7c749659a591?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n          priceRange: '$$'\n        },\n        {\n          id: '2',\n          name: 'Burger Bliss',\n          cuisine: 'American',\n          rating: 4.5,\n          deliveryTime: '15-25 min',\n          deliveryFee: 1.99,\n          imageUrl: 'https://images.unsplash.com/photo-1568901346375-23c9450c58cd?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n          priceRange: '$$'\n        },\n        {\n          id: '3',\n          name: 'Sushi Sensation',\n          cuisine: 'Japanese',\n          rating: 4.9,\n          deliveryTime: '35-45 min',\n          deliveryFee: 3.99,\n          imageUrl: 'https://images.unsplash.com/photo-1579871494447-9811cf80d66c?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n          priceRange: '$$$'\n        },\n        {\n          id: '4',\n          name: 'Taco Time',\n          cuisine: 'Mexican',\n          rating: 4.6,\n          deliveryTime: '20-30 min',\n          deliveryFee: 2.49,\n          imageUrl: 'https://images.unsplash.com/photo-1565299585323-38d6b0865b47?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n          priceRange: '$'\n        },\n        {\n          id: '5',\n          name: 'Pho Delight',\n          cuisine: 'Vietnamese',\n          rating: 4.7,\n          deliveryTime: '25-40 min',\n          deliveryFee: 2.99,\n          imageUrl: 'https://images.unsplash.com/photo-1582878826629-29b7ad1cdc43?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n          priceRange: '$$'\n        },\n        {\n          id: '6',\n          name: 'Curry House',\n          cuisine: 'Indian',\n          rating: 4.8,\n          deliveryTime: '30-45 min',\n          deliveryFee: 3.49,\n          imageUrl: 'https://images.unsplash.com/photo-1505253758473-96b7015fcd40?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n          priceRange: '$$'\n        }\n      ];\n      \n      console.log('Using mock data for restaurants');\n      return { success: true, data: mockData };\n    }\n  },\n\n  // Get a specific restaurant by ID\n  getRestaurantById: async (id) => {\n    try {\n      const response = await axios.get(`${API_URL}/${id}`);\n      return { success: true, data: response.data };\n    } catch (error) {\n      logError(error, 'getRestaurantById');\n      \n      // Mock data for development (remove in production)\n      const mockRestaurant = {\n        id: id,\n        name: 'Pizza Paradise',\n        cuisine: 'Italian',\n        rating: 4.8,\n        deliveryTime: '25-35 min',\n        deliveryFee: 2.99,\n        imageUrl: 'https://images.unsplash.com/photo-1513104890138-7c749659a591?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n        priceRange: '$$',\n        address: '123 Main St, Anytown, USA',\n        hours: '10:00 AM - 10:00 PM',\n        description: 'Pizza Paradise offers authentic Italian pizzas made with the freshest ingredients. Our dough is made fresh daily and we use only the finest cheeses and toppings.',\n        menu: [\n          {\n            id: 'm1',\n            category: 'Pizzas',\n            items: [\n              {\n                id: 'p1',\n                name: 'Margherita',\n                description: 'Classic pizza with tomato sauce, mozzarella, fresh basil, salt, and olive oil',\n                price: 12.99,\n                imageUrl: 'https://images.unsplash.com/photo-1574071318508-1cdbab80d002?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80',\n                popular: true\n              },\n              {\n                id: 'p2',\n                name: 'Pepperoni',\n                description: 'Classic pizza topped with tomato sauce, mozzarella, and pepperoni slices',\n                price: 14.99,\n                imageUrl: 'https://images.unsplash.com/photo-1628840042765-356cda07504e?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=80',\n                popular: true\n              }\n            ]\n          },\n          {\n            id: 'm2',\n            category: 'Sides',\n            items: [\n              {\n                id: 's1',\n                name: 'Garlic Bread',\n                description: 'Crispy bread with garlic butter and herbs',\n                price: 4.99,\n                imageUrl: '',\n                popular: true\n              }\n            ]\n          }\n        ]\n      };\n      \n      console.log('Using mock data for restaurant detail');\n      return { success: true, data: mockRestaurant };\n    }\n  },\n\n  // Get restaurant menu\n  getRestaurantMenu: async (restaurantId) => {\n    try {\n      const response = await axios.get(`${API_URL}/${restaurantId}/menu`);\n      return { success: true, data: response.data };\n    } catch (error) {\n      logError(error, 'getRestaurantMenu');\n      return { \n        success: false, \n        error: error.response?.data?.message || 'Failed to load restaurant menu.' \n      };\n    }\n  }\n};\n\nexport default restaurantApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}