{"ast":null,"code":"// frontend/src/api/restaurantApi.js\nimport axios from 'axios';\nconst API_URL = 'http://localhost:8080/api/public/restaurants';\n\n// Helper function to log errors\nconst logError = (error, context) => {\n  var _error$response, _error$response2;\n  console.error(`RestaurantAPI Error (${context}):`, {\n    message: error.message,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n  });\n};\nconst restaurantApi = {\n  // Get all restaurants with optional filters\n  getAllRestaurants: async (filters = {}) => {\n    try {\n      const response = await axios.get(API_URL, {\n        params: filters\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      logError(error, 'getAllRestaurants');\n\n      // Mock data for development (remove in production)\n      const mockData = [{\n        id: '1',\n        name: 'Pizza Paradise',\n        cuisine: 'Italian',\n        rating: 4.8,\n        deliveryTime: '25-35 min',\n        deliveryFee: 2.99,\n        imageUrl: 'https://images.unsplash.com/photo-1513104890138-7c749659a591?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n        priceRange: '$$'\n      }\n      // Other mock restaurants...\n      ];\n      console.log('Using mock data for restaurants');\n      return {\n        success: true,\n        data: mockData\n      };\n    }\n  },\n  // Get a specific restaurant by ID\n  getRestaurantById: async id => {\n    try {\n      const response = await axios.get(`${API_URL}/${id}`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      logError(error, 'getRestaurantById');\n\n      // Your existing mock data for restaurant details\n      // ...\n\n      console.log('Using mock data for restaurant detail');\n      return {\n        success: true,\n        data: mockRestaurant\n      };\n    }\n  },\n  // Get restaurant menu\n  getRestaurantMenu: async restaurantId => {\n    try {\n      const response = await axios.get(`${API_URL}/${restaurantId}/menu`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      logError(error, 'getRestaurantMenu');\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to load restaurant menu.'\n      };\n    }\n  },\n  // Get restaurants owned by the logged-in user\n  getMyRestaurants: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get(`http://localhost:8080/api/restaurants/owner`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Error fetching user restaurants:', error);\n\n      // For development only - mock data \n      if (process.env.NODE_ENV === 'development') {\n        console.log('Using mock restaurant data for development');\n        const mockData = [{\n          id: 1,\n          name: 'My Restaurant',\n          cuisine: 'Italian',\n          address: '123 Main St',\n          rating: 4.5,\n          deliveryTime: '25-35 min',\n          deliveryFee: 2.99,\n          imageUrl: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80'\n        }];\n        return {\n          success: true,\n          data: mockData\n        };\n      }\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to fetch restaurants. Please try again.'\n      };\n    }\n  }\n};\nexport default restaurantApi;","map":{"version":3,"names":["axios","API_URL","logError","error","context","_error$response","_error$response2","console","message","status","response","data","restaurantApi","getAllRestaurants","filters","get","params","success","mockData","id","name","cuisine","rating","deliveryTime","deliveryFee","imageUrl","priceRange","log","getRestaurantById","mockRestaurant","getRestaurantMenu","restaurantId","_error$response3","_error$response3$data","getMyRestaurants","token","localStorage","getItem","headers","_error$response4","_error$response4$data","process","env","NODE_ENV","address"],"sources":["/Users/akr4m/Desktop/Food_OrderingApp/frontend/src/api/restaurantApi.js"],"sourcesContent":["// frontend/src/api/restaurantApi.js\nimport axios from 'axios';\n\nconst API_URL = 'http://localhost:8080/api/public/restaurants';\n\n// Helper function to log errors\nconst logError = (error, context) => {\n  console.error(`RestaurantAPI Error (${context}):`, {\n    message: error.message,\n    status: error.response?.status,\n    data: error.response?.data,\n  });\n};\n\nconst restaurantApi = {\n  // Get all restaurants with optional filters\n  getAllRestaurants: async (filters = {}) => {\n    try {\n      const response = await axios.get(API_URL, { params: filters });\n      return { success: true, data: response.data };\n    } catch (error) {\n      logError(error, 'getAllRestaurants');\n      \n      // Mock data for development (remove in production)\n      const mockData = [\n        {\n          id: '1',\n          name: 'Pizza Paradise',\n          cuisine: 'Italian',\n          rating: 4.8,\n          deliveryTime: '25-35 min',\n          deliveryFee: 2.99,\n          imageUrl: 'https://images.unsplash.com/photo-1513104890138-7c749659a591?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80',\n          priceRange: '$$'\n        },\n        // Other mock restaurants...\n      ];\n      \n      console.log('Using mock data for restaurants');\n      return { success: true, data: mockData };\n    }\n  },\n\n  // Get a specific restaurant by ID\n  getRestaurantById: async (id) => {\n    try {\n      const response = await axios.get(`${API_URL}/${id}`);\n      return { success: true, data: response.data };\n    } catch (error) {\n      logError(error, 'getRestaurantById');\n      \n      // Your existing mock data for restaurant details\n      // ...\n      \n      console.log('Using mock data for restaurant detail');\n      return { success: true, data: mockRestaurant };\n    }\n  },\n\n  // Get restaurant menu\n  getRestaurantMenu: async (restaurantId) => {\n    try {\n      const response = await axios.get(`${API_URL}/${restaurantId}/menu`);\n      return { success: true, data: response.data };\n    } catch (error) {\n      logError(error, 'getRestaurantMenu');\n      return { \n        success: false, \n        error: error.response?.data?.message || 'Failed to load restaurant menu.' \n      };\n    }\n  },\n  \n  // Get restaurants owned by the logged-in user\n  getMyRestaurants: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get(\n        `http://localhost:8080/api/restaurants/owner`,\n        {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        }\n      );\n      return { success: true, data: response.data };\n    } catch (error) {\n      console.error('Error fetching user restaurants:', error);\n      \n      // For development only - mock data \n      if (process.env.NODE_ENV === 'development') {\n        console.log('Using mock restaurant data for development');\n        const mockData = [\n          {\n            id: 1,\n            name: 'My Restaurant',\n            cuisine: 'Italian',\n            address: '123 Main St',\n            rating: 4.5,\n            deliveryTime: '25-35 min',\n            deliveryFee: 2.99,\n            imageUrl: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80'\n          }\n        ];\n        return { success: true, data: mockData };\n      }\n      \n      return { \n        success: false, \n        error: error.response?.data?.message || 'Failed to fetch restaurants. Please try again.' \n      };\n    }\n  }\n};\n\nexport default restaurantApi;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}